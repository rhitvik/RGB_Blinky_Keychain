
Project_Infineon_Rev-10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800040  000003f4  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800048  00800048  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000575  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f2  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c0  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012f  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	75 c0       	rjmp	.+234    	; 0xf6 <__vector_5>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	e4 ef       	ldi	r30, 0xF4	; 244
  2a:	f3 e4       	ldi	r31, 0x43	; 67
  2c:	02 c0       	rjmp	.+4      	; 0x32 <__do_copy_data+0x10>
  2e:	31 91       	ld	r19, Z+
  30:	3d 93       	st	X+, r19
  32:	a8 34       	cpi	r26, 0x48	; 72
  34:	b2 07       	cpc	r27, r18
  36:	d9 f7       	brne	.-10     	; 0x2e <__do_copy_data+0xc>

00000038 <__do_clear_bss>:
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	a8 e4       	ldi	r26, 0x48	; 72
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <.do_clear_bss_start>

00000040 <.do_clear_bss_loop>:
  40:	1d 93       	st	X+, r17

00000042 <.do_clear_bss_start>:
  42:	a4 35       	cpi	r26, 0x54	; 84
  44:	b2 07       	cpc	r27, r18
  46:	e1 f7       	brne	.-8      	; 0x40 <.do_clear_bss_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	d2 c1       	rjmp	.+932    	; 0x3f0 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
volatile int MrCount_white = 0;
volatile bool increaseDuty_white = true;

int main(void)
{
	CCP = 0xD8;		// Unlock special consideration register
  4e:	48 ed       	ldi	r20, 0xD8	; 216
  50:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0x00;	// Set the system clock to 8 MHz
  52:	16 bf       	out	0x36, r17	; 54
	
	DDRB |= (1U<<PINB0) | (1U<<PINB1) | (1U<<PINB2);
  54:	41 b1       	in	r20, 0x01	; 1
  56:	47 60       	ori	r20, 0x07	; 7
  58:	41 b9       	out	0x01, r20	; 1
	//DDRB &= ~(1U<<PINB3);
	PORTB |= (1U<<PINB0) | (1U<<PINB1) | (1U<<PINB2); //setting pins high will turnoff the RGB in common anode configuration
  5a:	42 b1       	in	r20, 0x02	; 2
  5c:	47 60       	ori	r20, 0x07	; 7
  5e:	42 b9       	out	0x02, r20	; 2
	//PUEB |= (1U<<PUEB3);	// Pull up on Pin B3
	
	TCCR0B |= (1U<<WGM02) | (1U<<CS00); 
  60:	4d b5       	in	r20, 0x2d	; 45
  62:	49 60       	ori	r20, 0x09	; 9
  64:	4d bd       	out	0x2d, r20	; 45
	//Fast PWM mode with no Pre-Scalar Selection 
    TIMSK0 |= (1U<<OCIE0A);
  66:	4b b5       	in	r20, 0x2b	; 43
  68:	42 60       	ori	r20, 0x02	; 2
  6a:	4b bd       	out	0x2b, r20	; 43
	//Set Output Compare Interrupt Enable 
	
	// 8 000 000 / 10000 = 800
	OCR0AH = 800 >> 8;
  6c:	43 e0       	ldi	r20, 0x03	; 3
  6e:	47 bd       	out	0x27, r20	; 39
	OCR0AL = 800 & 0xFF;
  70:	40 e2       	ldi	r20, 0x20	; 32
  72:	46 bd       	out	0x26, r20	; 38
	
	sei();	// Enable Global Interrupts
  74:	78 94       	sei
	
	bool pressed = 0;
	bool interruptCleared = false;
  76:	80 e0       	ldi	r24, 0x00	; 0
	OCR0AH = 800 >> 8;
	OCR0AL = 800 & 0xFF;
	
	sei();	// Enable Global Interrupts
	
	bool pressed = 0;
  78:	70 e0       	ldi	r23, 0x00	; 0
				
				Duty[GREEN] = 0;
				Duty[RED] = (State == 1)? 100:0;
				Duty[BLUE] = 0;
				
				increaseDuty[GREEN] = true;
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <__stack+0x21>
			}
		}
		else
		if(bit_is_set(PINB,3))
		{
			pressed = (pressed == 1)? 0:pressed;
  7e:	70 e0       	ldi	r23, 0x00	; 0
	
	bool pressed = 0;
	bool interruptCleared = false;
	
	while (1){
		if (bit_is_clear(PINB,3))
  80:	40 b1       	in	r20, 0x00	; 0
  82:	54 2f       	mov	r21, r20
  84:	58 70       	andi	r21, 0x08	; 8
  86:	43 fd       	sbrc	r20, 3
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__stack+0x87>
		{
			if (pressed == 0)
  8a:	71 13       	cpse	r23, r17
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <__stack+0x21>
			{
				pressed = 1;
				
				cli();
  8e:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e5       	ldi	r24, 0x5F	; 95
  92:	9a ee       	ldi	r25, 0xEA	; 234
  94:	81 50       	subi	r24, 0x01	; 1
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e9 f7       	brne	.-6      	; 0x94 <__stack+0x35>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__stack+0x3d>
  9c:	00 00       	nop
				interruptCleared = true;
				_delay_ms(30);			
				State = State + 1;
  9e:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
  a0:	4f 5f       	subi	r20, 0xFF	; 255
  a2:	41 a9       	sts	0x41, r20	; 0x800041 <State>
				State = (State >= 9)? 1:State;	
  a4:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
  a6:	49 30       	cpi	r20, 0x09	; 9
  a8:	10 f4       	brcc	.+4      	; 0xae <__stack+0x4f>
  aa:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <__stack+0x51>
  ae:	46 2f       	mov	r20, r22
  b0:	41 a9       	sts	0x41, r20	; 0x800041 <State>
				
				count[GREEN] = 0;
  b2:	11 ab       	sts	0x51, r17	; 0x800051 <count>
				count[RED] = 0;
  b4:	12 ab       	sts	0x52, r17	; 0x800052 <count+0x1>
				count[BLUE] = 0;
  b6:	13 ab       	sts	0x53, r17	; 0x800053 <count+0x2>
				
				Duty[GREEN] = 0;
  b8:	15 a9       	sts	0x45, r17	; 0x800045 <Duty>
				Duty[RED] = (State == 1)? 100:0;
  ba:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	09 f4       	brne	.+2      	; 0xc2 <__stack+0x63>
  c0:	54 e6       	ldi	r21, 0x64	; 100
  c2:	56 a9       	sts	0x46, r21	; 0x800046 <Duty+0x1>
				Duty[BLUE] = 0;
  c4:	17 a9       	sts	0x47, r17	; 0x800047 <Duty+0x2>
				
				increaseDuty[GREEN] = true;
  c6:	62 a9       	sts	0x42, r22	; 0x800042 <increaseDuty>
				increaseDuty[RED] = true;
  c8:	63 a9       	sts	0x43, r22	; 0x800043 <increaseDuty+0x1>
				increaseDuty[BLUE] = true;
  ca:	64 a9       	sts	0x44, r22	; 0x800044 <increaseDuty+0x2>

				MrCount = 0;
  cc:	10 ab       	sts	0x50, r17	; 0x800050 <MrCount>
				Theta = 0;
  ce:	1f a9       	sts	0x4f, r17	; 0x80004f <Theta>

				wait_white = 0;
  d0:	1e a9       	sts	0x4e, r17	; 0x80004e <wait_white>
				count_white = 0;
  d2:	1d a9       	sts	0x4d, r17	; 0x80004d <count_white+0x1>
  d4:	1c a9       	sts	0x4c, r17	; 0x80004c <count_white>
				Duty_white = 0;
  d6:	1b a9       	sts	0x4b, r17	; 0x80004b <Duty_white+0x1>
  d8:	1a a9       	sts	0x4a, r17	; 0x80004a <Duty_white>

				MrCount_white = 0;
  da:	19 a9       	sts	0x49, r17	; 0x800049 <__data_end+0x1>
  dc:	18 a9       	sts	0x48, r17	; 0x800048 <__data_end>
 				increaseDuty_white = true;		
  de:	60 a9       	sts	0x40, r22	; 0x800040 <__DATA_REGION_ORIGIN__>
			if (pressed == 0)
			{
				pressed = 1;
				
				cli();
				interruptCleared = true;
  e0:	86 2f       	mov	r24, r22
	while (1){
		if (bit_is_clear(PINB,3))
		{
			if (pressed == 0)
			{
				pressed = 1;
  e2:	76 2f       	mov	r23, r22
  e4:	cd cf       	rjmp	.-102    	; 0x80 <__stack+0x21>
				MrCount_white = 0;
 				increaseDuty_white = true;		
			}
		}
		else
		if(bit_is_set(PINB,3))
  e6:	03 9b       	sbis	0x00, 3	; 0
  e8:	cb cf       	rjmp	.-106    	; 0x80 <__stack+0x21>
		{
			pressed = (pressed == 1)? 0:pressed;
			if (interruptCleared == true){
  ea:	88 23       	and	r24, r24
  ec:	41 f2       	breq	.-112    	; 0x7e <__stack+0x1f>
				interruptCleared = false;
				sei();
  ee:	78 94       	sei
		else
		if(bit_is_set(PINB,3))
		{
			pressed = (pressed == 1)? 0:pressed;
			if (interruptCleared == true){
				interruptCleared = false;
  f0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		else
		if(bit_is_set(PINB,3))
		{
			pressed = (pressed == 1)? 0:pressed;
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	c5 cf       	rjmp	.-118    	; 0x80 <__stack+0x21>

000000f6 <__vector_5>:
			}
		}					
    }	//while(1)
}	//int main()

ISR(TIM0_COMPA_vect){	// will be called 10,000 times every second
  f6:	1f 93       	push	r17
  f8:	0f 93       	push	r16
  fa:	0f b7       	in	r16, 0x3f	; 63
  fc:	0f 93       	push	r16
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
	//in 10000 hz we can work with a freq interval of 1000 hz
	// that is out of the 1000 times we can turn on the at a given count and ...
	// ... then turn off at a given interval
	// for example for a 50 percent duty cycle turn it on at the count of 500
	
	switch (State){
 108:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <__DATA_REGION_LENGTH__+0x1a>
 10e:	08 f4       	brcc	.+2      	; 0x112 <__DATA_REGION_LENGTH__+0x12>
 110:	66 c1       	rjmp	.+716    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
 112:	49 30       	cpi	r20, 0x09	; 9
 114:	08 f4       	brcc	.+2      	; 0x118 <__DATA_REGION_LENGTH__+0x18>
 116:	f0 c0       	rjmp	.+480    	; 0x2f8 <__DATA_REGION_LENGTH__+0x1f8>
 118:	62 c1       	rjmp	.+708    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
		case 1:
		///// case 1 starts here
		count[GREEN]++;
 11a:	41 a3       	lds	r20, 0x51	; 0x800051 <count>
 11c:	4f 5f       	subi	r20, 0xFF	; 255
 11e:	41 ab       	sts	0x51, r20	; 0x800051 <count>
		count[RED]++;
 120:	42 a3       	lds	r20, 0x52	; 0x800052 <count+0x1>
 122:	4f 5f       	subi	r20, 0xFF	; 255
 124:	42 ab       	sts	0x52, r20	; 0x800052 <count+0x1>
		count[BLUE]++;
 126:	43 a3       	lds	r20, 0x53	; 0x800053 <count+0x2>
 128:	4f 5f       	subi	r20, 0xFF	; 255
 12a:	43 ab       	sts	0x53, r20	; 0x800053 <count+0x2>
		
		MrCount++;
 12c:	40 a3       	lds	r20, 0x50	; 0x800050 <MrCount>
 12e:	4f 5f       	subi	r20, 0xFF	; 255
 130:	40 ab       	sts	0x50, r20	; 0x800050 <MrCount>
		if (MrCount == 255)
 132:	40 a3       	lds	r20, 0x50	; 0x800050 <MrCount>
 134:	4f 3f       	cpi	r20, 0xFF	; 255
 136:	09 f0       	breq	.+2      	; 0x13a <__DATA_REGION_LENGTH__+0x3a>
 138:	a0 c0       	rjmp	.+320    	; 0x27a <__DATA_REGION_LENGTH__+0x17a>
		{
			MrCount = 0;
 13a:	10 ab       	sts	0x50, r17	; 0x800050 <MrCount>
			Theta++;
 13c:	4f a1       	lds	r20, 0x4f	; 0x80004f <Theta>
 13e:	4f 5f       	subi	r20, 0xFF	; 255
 140:	4f a9       	sts	0x4f, r20	; 0x80004f <Theta>
			Theta = (Theta > 90)? 0:Theta;
 142:	4f a1       	lds	r20, 0x4f	; 0x80004f <Theta>
 144:	4b 35       	cpi	r20, 0x5B	; 91
 146:	10 f4       	brcc	.+4      	; 0x14c <__DATA_REGION_LENGTH__+0x4c>
 148:	4f a1       	lds	r20, 0x4f	; 0x80004f <Theta>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <__DATA_REGION_LENGTH__+0x4e>
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	4f a9       	sts	0x4f, r20	; 0x80004f <Theta>
			
			switch(Theta){
 150:	4f a1       	lds	r20, 0x4f	; 0x80004f <Theta>
 152:	4d 33       	cpi	r20, 0x3D	; 61
 154:	28 f4       	brcc	.+10     	; 0x160 <__DATA_REGION_LENGTH__+0x60>
 156:	4f 31       	cpi	r20, 0x1F	; 31
 158:	a8 f5       	brcc	.+106    	; 0x1c4 <__DATA_REGION_LENGTH__+0xc4>
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	28 f4       	brcc	.+10     	; 0x168 <__DATA_REGION_LENGTH__+0x68>
 15e:	8d c0       	rjmp	.+282    	; 0x27a <__DATA_REGION_LENGTH__+0x17a>
 160:	4b 35       	cpi	r20, 0x5B	; 91
 162:	08 f4       	brcc	.+2      	; 0x166 <__DATA_REGION_LENGTH__+0x66>
 164:	5d c0       	rjmp	.+186    	; 0x220 <__DATA_REGION_LENGTH__+0x120>
 166:	89 c0       	rjmp	.+274    	; 0x27a <__DATA_REGION_LENGTH__+0x17a>
				
				case 1 ... 30:
				increaseDuty[GREEN] = (increaseDuty[GREEN] == true)? increaseDuty[GREEN]:true;
 168:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 16a:	44 23       	and	r20, r20
 16c:	11 f0       	breq	.+4      	; 0x172 <__DATA_REGION_LENGTH__+0x72>
 16e:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 170:	01 c0       	rjmp	.+2      	; 0x174 <__DATA_REGION_LENGTH__+0x74>
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	42 a9       	sts	0x42, r20	; 0x800042 <increaseDuty>
				increaseDuty[RED] = (increaseDuty[RED] == false)? increaseDuty[RED]:false;
 176:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 178:	41 13       	cpse	r20, r17
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__DATA_REGION_LENGTH__+0x80>
 17c:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 17e:	01 c0       	rjmp	.+2      	; 0x182 <__DATA_REGION_LENGTH__+0x82>
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	43 a9       	sts	0x43, r20	; 0x800043 <increaseDuty+0x1>
				
				Duty[GREEN] = (increaseDuty[GREEN] == true)? Duty[GREEN]+1: (Duty[GREEN] == 0)? 0:Duty[GREEN]-1;
 184:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 186:	44 23       	and	r20, r20
 188:	19 f0       	breq	.+6      	; 0x190 <__DATA_REGION_LENGTH__+0x90>
 18a:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	05 c0       	rjmp	.+10     	; 0x19a <__DATA_REGION_LENGTH__+0x9a>
 190:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 192:	44 23       	and	r20, r20
 194:	11 f0       	breq	.+4      	; 0x19a <__DATA_REGION_LENGTH__+0x9a>
 196:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 198:	41 50       	subi	r20, 0x01	; 1
 19a:	45 a9       	sts	0x45, r20	; 0x800045 <Duty>
				Duty[RED] = (increaseDuty[RED] == true)? Duty[RED]+1: (Duty[RED] == 0)? 0:Duty[RED]-1;
 19c:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 19e:	44 23       	and	r20, r20
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <__DATA_REGION_LENGTH__+0xa8>
 1a2:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <__DATA_REGION_LENGTH__+0xb2>
 1a8:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 1aa:	44 23       	and	r20, r20
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <__DATA_REGION_LENGTH__+0xb2>
 1ae:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 1b0:	41 50       	subi	r20, 0x01	; 1
 1b2:	46 a9       	sts	0x46, r20	; 0x800046 <Duty+0x1>
				Duty[BLUE] = (Duty[BLUE] == 0)? Duty[BLUE]:0;
 1b4:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 1b6:	41 13       	cpse	r20, r17
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__DATA_REGION_LENGTH__+0xbe>
 1ba:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <__DATA_REGION_LENGTH__+0xc0>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	47 a9       	sts	0x47, r20	; 0x800047 <Duty+0x2>
				break;
 1c2:	5b c0       	rjmp	.+182    	; 0x27a <__DATA_REGION_LENGTH__+0x17a>
				
				case 31 ... 60:
				increaseDuty[GREEN] = (increaseDuty[GREEN] == false)? increaseDuty[GREEN]:false;
 1c4:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 1c6:	41 13       	cpse	r20, r17
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__DATA_REGION_LENGTH__+0xce>
 1ca:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <__DATA_REGION_LENGTH__+0xd0>
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	42 a9       	sts	0x42, r20	; 0x800042 <increaseDuty>
				increaseDuty[BLUE] = (increaseDuty[BLUE] == true)? increaseDuty[BLUE]:true;
 1d2:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 1d4:	44 23       	and	r20, r20
 1d6:	11 f0       	breq	.+4      	; 0x1dc <__DATA_REGION_LENGTH__+0xdc>
 1d8:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 1da:	01 c0       	rjmp	.+2      	; 0x1de <__DATA_REGION_LENGTH__+0xde>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	44 a9       	sts	0x44, r20	; 0x800044 <increaseDuty+0x2>
				
				Duty[GREEN] = (increaseDuty[GREEN] == true)? Duty[GREEN]+1: (Duty[GREEN] == 0)? 0:Duty[GREEN]-1;
 1e0:	42 a1       	lds	r20, 0x42	; 0x800042 <increaseDuty>
 1e2:	44 23       	and	r20, r20
 1e4:	19 f0       	breq	.+6      	; 0x1ec <__DATA_REGION_LENGTH__+0xec>
 1e6:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__DATA_REGION_LENGTH__+0xf6>
 1ec:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 1ee:	44 23       	and	r20, r20
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <__DATA_REGION_LENGTH__+0xf6>
 1f2:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 1f4:	41 50       	subi	r20, 0x01	; 1
 1f6:	45 a9       	sts	0x45, r20	; 0x800045 <Duty>
				Duty[RED] = (Duty[RED] == 0)? Duty[RED]:0;
 1f8:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 1fa:	41 13       	cpse	r20, r17
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__DATA_REGION_LENGTH__+0x102>
 1fe:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 200:	01 c0       	rjmp	.+2      	; 0x204 <__DATA_REGION_LENGTH__+0x104>
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	46 a9       	sts	0x46, r20	; 0x800046 <Duty+0x1>
				Duty[BLUE] = (increaseDuty[BLUE] == true)? Duty[BLUE]+1: (Duty[BLUE] == 0)? 0:Duty[BLUE]-1;
 206:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 208:	44 23       	and	r20, r20
 20a:	19 f0       	breq	.+6      	; 0x212 <__DATA_REGION_LENGTH__+0x112>
 20c:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 20e:	4f 5f       	subi	r20, 0xFF	; 255
 210:	05 c0       	rjmp	.+10     	; 0x21c <__DATA_REGION_LENGTH__+0x11c>
 212:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 214:	44 23       	and	r20, r20
 216:	11 f0       	breq	.+4      	; 0x21c <__DATA_REGION_LENGTH__+0x11c>
 218:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 21a:	41 50       	subi	r20, 0x01	; 1
 21c:	47 a9       	sts	0x47, r20	; 0x800047 <Duty+0x2>
				break;
 21e:	2d c0       	rjmp	.+90     	; 0x27a <__DATA_REGION_LENGTH__+0x17a>
				
				case 61 ... 90:
				increaseDuty[RED] = (increaseDuty[RED] == true)? increaseDuty[RED]:true;
 220:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 222:	44 23       	and	r20, r20
 224:	11 f0       	breq	.+4      	; 0x22a <__DATA_REGION_LENGTH__+0x12a>
 226:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 228:	01 c0       	rjmp	.+2      	; 0x22c <__DATA_REGION_LENGTH__+0x12c>
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	43 a9       	sts	0x43, r20	; 0x800043 <increaseDuty+0x1>
				increaseDuty[BLUE] = (increaseDuty[BLUE] == false)? increaseDuty[BLUE]:false;
 22e:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 230:	41 13       	cpse	r20, r17
 232:	02 c0       	rjmp	.+4      	; 0x238 <__DATA_REGION_LENGTH__+0x138>
 234:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 236:	01 c0       	rjmp	.+2      	; 0x23a <__DATA_REGION_LENGTH__+0x13a>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	44 a9       	sts	0x44, r20	; 0x800044 <increaseDuty+0x2>
				
				Duty[GREEN] = (Duty[GREEN] == 0)? Duty[GREEN]:0;
 23c:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 23e:	41 13       	cpse	r20, r17
 240:	02 c0       	rjmp	.+4      	; 0x246 <__DATA_REGION_LENGTH__+0x146>
 242:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 244:	01 c0       	rjmp	.+2      	; 0x248 <__DATA_REGION_LENGTH__+0x148>
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	45 a9       	sts	0x45, r20	; 0x800045 <Duty>
				Duty[RED] = (increaseDuty[RED] == true)? Duty[RED]+1: (Duty[RED] == 0)? 0:Duty[RED]-1;
 24a:	43 a1       	lds	r20, 0x43	; 0x800043 <increaseDuty+0x1>
 24c:	44 23       	and	r20, r20
 24e:	19 f0       	breq	.+6      	; 0x256 <__DATA_REGION_LENGTH__+0x156>
 250:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 252:	4f 5f       	subi	r20, 0xFF	; 255
 254:	05 c0       	rjmp	.+10     	; 0x260 <__DATA_REGION_LENGTH__+0x160>
 256:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 258:	44 23       	and	r20, r20
 25a:	11 f0       	breq	.+4      	; 0x260 <__DATA_REGION_LENGTH__+0x160>
 25c:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 25e:	41 50       	subi	r20, 0x01	; 1
 260:	46 a9       	sts	0x46, r20	; 0x800046 <Duty+0x1>
				Duty[BLUE] = (increaseDuty[BLUE] == true)? Duty[BLUE]+1: (Duty[BLUE] == 0)? 0:Duty[BLUE]-1;
 262:	44 a1       	lds	r20, 0x44	; 0x800044 <increaseDuty+0x2>
 264:	44 23       	and	r20, r20
 266:	19 f0       	breq	.+6      	; 0x26e <__DATA_REGION_LENGTH__+0x16e>
 268:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 26a:	4f 5f       	subi	r20, 0xFF	; 255
 26c:	05 c0       	rjmp	.+10     	; 0x278 <__DATA_REGION_LENGTH__+0x178>
 26e:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 270:	44 23       	and	r20, r20
 272:	11 f0       	breq	.+4      	; 0x278 <__DATA_REGION_LENGTH__+0x178>
 274:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 276:	41 50       	subi	r20, 0x01	; 1
 278:	47 a9       	sts	0x47, r20	; 0x800047 <Duty+0x2>
				break;
			}			
		}
		
		switch (count[GREEN]){
 27a:	41 a3       	lds	r20, 0x51	; 0x800051 <count>
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	88 f0       	brcs	.+34     	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
 280:	44 36       	cpi	r20, 0x64	; 100
 282:	18 f0       	brcs	.+6      	; 0x28a <__DATA_REGION_LENGTH__+0x18a>
 284:	44 36       	cpi	r20, 0x64	; 100
 286:	39 f0       	breq	.+14     	; 0x296 <__DATA_REGION_LENGTH__+0x196>
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
			
			case 1 ... 99:
			if (count[GREEN] >= Duty[GREEN]){
 28a:	51 a3       	lds	r21, 0x51	; 0x800051 <count>
 28c:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 28e:	54 17       	cp	r21, r20
 290:	40 f0       	brcs	.+16     	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
				//turn off the pin
				PORTB |= 0x01;
 292:	10 9a       	sbi	0x02, 0	; 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
			}
			break;
			
			case 100:
			count[GREEN] = 0; // set count back to 0
 296:	11 ab       	sts	0x51, r17	; 0x800051 <count>
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,GREEN)) && (Duty[GREEN] != 0) ) {
 298:	00 9b       	sbis	0x00, 0	; 0
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
 29c:	45 a1       	lds	r20, 0x45	; 0x800045 <Duty>
 29e:	41 13       	cpse	r20, r17
 2a0:	93 c0       	rjmp	.+294    	; 0x3c8 <__DATA_REGION_LENGTH__+0x2c8>
			}
			break;
			
		}
		
		switch (count[RED]){
 2a2:	42 a3       	lds	r20, 0x52	; 0x800052 <count+0x1>
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	88 f0       	brcs	.+34     	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
 2a8:	44 36       	cpi	r20, 0x64	; 100
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <__DATA_REGION_LENGTH__+0x1b2>
 2ac:	44 36       	cpi	r20, 0x64	; 100
 2ae:	39 f0       	breq	.+14     	; 0x2be <__DATA_REGION_LENGTH__+0x1be>
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
			
			case 1 ... 99:
			if (count[RED] >= Duty[RED]){
 2b2:	52 a3       	lds	r21, 0x52	; 0x800052 <count+0x1>
 2b4:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 2b6:	54 17       	cp	r21, r20
 2b8:	40 f0       	brcs	.+16     	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
				//turn off the pin
				PORTB |= 0x02;
 2ba:	11 9a       	sbi	0x02, 1	; 2
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
			}
			break;
			
			case 100:
			count[RED] = 0; // set count back to 0
 2be:	12 ab       	sts	0x52, r17	; 0x800052 <count+0x1>
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,RED)) && (Duty[RED] != 0) ) {
 2c0:	01 9b       	sbis	0x00, 1	; 0
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
 2c4:	46 a1       	lds	r20, 0x46	; 0x800046 <Duty+0x1>
 2c6:	41 13       	cpse	r20, r17
 2c8:	81 c0       	rjmp	.+258    	; 0x3cc <__DATA_REGION_LENGTH__+0x2cc>
				PORTB &= ~(1<<PINB1);
			}
			break;
		}
		switch (count[BLUE]){
 2ca:	43 a3       	lds	r20, 0x53	; 0x800053 <count+0x2>
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <__DATA_REGION_LENGTH__+0x1d2>
 2d0:	86 c0       	rjmp	.+268    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
 2d2:	44 36       	cpi	r20, 0x64	; 100
 2d4:	18 f0       	brcs	.+6      	; 0x2dc <__DATA_REGION_LENGTH__+0x1dc>
 2d6:	44 36       	cpi	r20, 0x64	; 100
 2d8:	41 f0       	breq	.+16     	; 0x2ea <__DATA_REGION_LENGTH__+0x1ea>
 2da:	81 c0       	rjmp	.+258    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			
			case 1 ... 99:
			if (count[BLUE] >= Duty[BLUE]){
 2dc:	53 a3       	lds	r21, 0x53	; 0x800053 <count+0x2>
 2de:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 2e0:	54 17       	cp	r21, r20
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <__DATA_REGION_LENGTH__+0x1e6>
 2e4:	7c c0       	rjmp	.+248    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
				//turn off the pin
				PORTB |= 0x04;
 2e6:	12 9a       	sbi	0x02, 2	; 2
 2e8:	7a c0       	rjmp	.+244    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			}
			break;
			
			case 100:
			count[BLUE] = 0; // set count back to 0
 2ea:	13 ab       	sts	0x53, r17	; 0x800053 <count+0x2>
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,BLUE)) && (Duty[BLUE] != 0) ) {
 2ec:	02 9b       	sbis	0x00, 2	; 0
 2ee:	77 c0       	rjmp	.+238    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
 2f0:	47 a1       	lds	r20, 0x47	; 0x800047 <Duty+0x2>
 2f2:	41 13       	cpse	r20, r17
 2f4:	6d c0       	rjmp	.+218    	; 0x3d0 <__DATA_REGION_LENGTH__+0x2d0>
 2f6:	73 c0       	rjmp	.+230    	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
		///// case 1 ends here 
		break;
		
		case 2 ... 8:
		///// case 2 starts here
		count_white++;
 2f8:	4c a1       	lds	r20, 0x4c	; 0x80004c <count_white>
 2fa:	5d a1       	lds	r21, 0x4d	; 0x80004d <count_white+0x1>
 2fc:	4f 5f       	subi	r20, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	5d a9       	sts	0x4d, r21	; 0x80004d <count_white+0x1>
 302:	4c a9       	sts	0x4c, r20	; 0x80004c <count_white>
		
		MrCount_white++;
 304:	48 a1       	lds	r20, 0x48	; 0x800048 <__data_end>
 306:	59 a1       	lds	r21, 0x49	; 0x800049 <__data_end+0x1>
 308:	4f 5f       	subi	r20, 0xFF	; 255
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	59 a9       	sts	0x49, r21	; 0x800049 <__data_end+0x1>
 30e:	48 a9       	sts	0x48, r20	; 0x800048 <__data_end>
		if (MrCount_white >= 255)
 310:	48 a1       	lds	r20, 0x48	; 0x800048 <__data_end>
 312:	59 a1       	lds	r21, 0x49	; 0x800049 <__data_end+0x1>
 314:	4f 3f       	cpi	r20, 0xFF	; 255
 316:	51 07       	cpc	r21, r17
 318:	9c f1       	brlt	.+102    	; 0x380 <__DATA_REGION_LENGTH__+0x280>
		{
			MrCount_white = 0;
 31a:	19 a9       	sts	0x49, r17	; 0x800049 <__data_end+0x1>
 31c:	18 a9       	sts	0x48, r17	; 0x800048 <__data_end>
			Duty_white = (increaseDuty_white == true)? Duty_white+1:Duty_white-1;
 31e:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 320:	44 23       	and	r20, r20
 322:	29 f0       	breq	.+10     	; 0x32e <__DATA_REGION_LENGTH__+0x22e>
 324:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 326:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 328:	4f 5f       	subi	r20, 0xFF	; 255
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	04 c0       	rjmp	.+8      	; 0x336 <__DATA_REGION_LENGTH__+0x236>
 32e:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 330:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 332:	41 50       	subi	r20, 0x01	; 1
 334:	51 0b       	sbc	r21, r17
 336:	5b a9       	sts	0x4b, r21	; 0x80004b <Duty_white+0x1>
 338:	4a a9       	sts	0x4a, r20	; 0x80004a <Duty_white>
			
			if ((Duty_white > 30) || (Duty_white < 0)) {
 33a:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 33c:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 33e:	4f 31       	cpi	r20, 0x1F	; 31
 340:	51 07       	cpc	r21, r17
 342:	24 f4       	brge	.+8      	; 0x34c <__DATA_REGION_LENGTH__+0x24c>
 344:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 346:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 348:	55 23       	and	r21, r21
 34a:	d4 f4       	brge	.+52     	; 0x380 <__DATA_REGION_LENGTH__+0x280>
				if (Duty_white > 30) { Duty_white = 30; increaseDuty_white = false;}
 34c:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 34e:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 350:	4f 31       	cpi	r20, 0x1F	; 31
 352:	51 07       	cpc	r21, r17
 354:	34 f0       	brlt	.+12     	; 0x362 <__DATA_REGION_LENGTH__+0x262>
 356:	4e e1       	ldi	r20, 0x1E	; 30
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	5b a9       	sts	0x4b, r21	; 0x80004b <Duty_white+0x1>
 35c:	4a a9       	sts	0x4a, r20	; 0x80004a <Duty_white>
 35e:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
 360:	0f c0       	rjmp	.+30     	; 0x380 <__DATA_REGION_LENGTH__+0x280>
				else if (Duty_white < 0){
 362:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 364:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 366:	55 23       	and	r21, r21
 368:	5c f4       	brge	.+22     	; 0x380 <__DATA_REGION_LENGTH__+0x280>
					Duty_white = 0;
 36a:	1b a9       	sts	0x4b, r17	; 0x80004b <Duty_white+0x1>
 36c:	1a a9       	sts	0x4a, r17	; 0x80004a <Duty_white>
					wait_white++;
 36e:	4e a1       	lds	r20, 0x4e	; 0x80004e <wait_white>
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	4e a9       	sts	0x4e, r20	; 0x80004e <wait_white>
					if (wait_white == 3){
 374:	4e a1       	lds	r20, 0x4e	; 0x80004e <wait_white>
 376:	43 30       	cpi	r20, 0x03	; 3
 378:	19 f4       	brne	.+6      	; 0x380 <__DATA_REGION_LENGTH__+0x280>
						wait_white = 0;
 37a:	1e a9       	sts	0x4e, r17	; 0x80004e <wait_white>
						increaseDuty_white = true;
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
				}
			}
			
		}
		
		switch (count_white){
 380:	4c a1       	lds	r20, 0x4c	; 0x80004c <count_white>
 382:	5d a1       	lds	r21, 0x4d	; 0x80004d <count_white+0x1>
 384:	41 30       	cpi	r20, 0x01	; 1
 386:	51 07       	cpc	r21, r17
 388:	54 f1       	brlt	.+84     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
 38a:	44 36       	cpi	r20, 0x64	; 100
 38c:	51 07       	cpc	r21, r17
 38e:	24 f0       	brlt	.+8      	; 0x398 <__DATA_REGION_LENGTH__+0x298>
 390:	44 36       	cpi	r20, 0x64	; 100
 392:	51 07       	cpc	r21, r17
 394:	61 f0       	breq	.+24     	; 0x3ae <__DATA_REGION_LENGTH__+0x2ae>
 396:	23 c0       	rjmp	.+70     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			
			case 1 ... 99:
			if (count_white >= Duty_white){
 398:	6c a1       	lds	r22, 0x4c	; 0x80004c <count_white>
 39a:	7d a1       	lds	r23, 0x4d	; 0x80004d <count_white+0x1>
 39c:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 39e:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 3a0:	64 17       	cp	r22, r20
 3a2:	75 07       	cpc	r23, r21
 3a4:	e4 f0       	brlt	.+56     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
				//turn off the pin
				PORTB |= 0x07;
 3a6:	42 b1       	in	r20, 0x02	; 2
 3a8:	47 60       	ori	r20, 0x07	; 7
 3aa:	42 b9       	out	0x02, r20	; 2
 3ac:	18 c0       	rjmp	.+48     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			}
			break;
			
			case 100:
			count_white = 0; // set count back to 0
 3ae:	1d a9       	sts	0x4d, r17	; 0x80004d <count_white+0x1>
 3b0:	1c a9       	sts	0x4c, r17	; 0x80004c <count_white>
			//if the pin is off
			//turn
			if ( ((bit_is_set(PINB,0)) || (bit_is_set(PINB,1)) || (bit_is_set(PINB,2))) && (Duty_white != 0) ) {
 3b2:	00 99       	sbic	0x00, 0	; 0
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <__DATA_REGION_LENGTH__+0x2be>
 3b6:	01 99       	sbic	0x00, 1	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <__DATA_REGION_LENGTH__+0x2be>
 3ba:	02 9b       	sbis	0x00, 2	; 0
 3bc:	10 c0       	rjmp	.+32     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
 3be:	4a a1       	lds	r20, 0x4a	; 0x80004a <Duty_white>
 3c0:	5b a1       	lds	r21, 0x4b	; 0x80004b <Duty_white+0x1>
 3c2:	45 2b       	or	r20, r21
 3c4:	39 f4       	brne	.+14     	; 0x3d4 <__DATA_REGION_LENGTH__+0x2d4>
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			case 100:
			count[GREEN] = 0; // set count back to 0
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,GREEN)) && (Duty[GREEN] != 0) ) {
				PORTB &= ~(1<<PINB0);
 3c8:	10 98       	cbi	0x02, 0	; 2
 3ca:	6b cf       	rjmp	.-298    	; 0x2a2 <__DATA_REGION_LENGTH__+0x1a2>
			case 100:
			count[RED] = 0; // set count back to 0
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,RED)) && (Duty[RED] != 0) ) {
				PORTB &= ~(1<<PINB1);
 3cc:	11 98       	cbi	0x02, 1	; 2
 3ce:	7d cf       	rjmp	.-262    	; 0x2ca <__DATA_REGION_LENGTH__+0x1ca>
			case 100:
			count[BLUE] = 0; // set count back to 0
			//if the pin is off
			//turn
			if ( (bit_is_set(PINB,BLUE)) && (Duty[BLUE] != 0) ) {
				PORTB &= ~(1<<PINB2);
 3d0:	12 98       	cbi	0x02, 2	; 2
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <__DATA_REGION_LENGTH__+0x2de>
			case 100:
			count_white = 0; // set count back to 0
			//if the pin is off
			//turn
			if ( ((bit_is_set(PINB,0)) || (bit_is_set(PINB,1)) || (bit_is_set(PINB,2))) && (Duty_white != 0) ) {
				PORTB &= 0x06 + State;
 3d4:	41 a1       	lds	r20, 0x41	; 0x800041 <State>
 3d6:	52 b1       	in	r21, 0x02	; 2
 3d8:	4a 5f       	subi	r20, 0xFA	; 250
 3da:	45 23       	and	r20, r21
 3dc:	42 b9       	out	0x02, r20	; 2
		}
		///// case 2 ends here
		break;

	} // switch (state)	
}
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	0f 91       	pop	r16
 3e8:	0f bf       	out	0x3f, r16	; 63
 3ea:	0f 91       	pop	r16
 3ec:	1f 91       	pop	r17
 3ee:	18 95       	reti

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
